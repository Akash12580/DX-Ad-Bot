import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

API_TOKEN = "7981937789:AAFyKK0MgFHZeY0S9K5FyZa87RIGz-UZH8Y"  # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡¶∏‡¶æ‡¶®

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶°‡ßá‡¶Æ‡ßã‡¶§‡ßá ‡¶Æ‡ßá‡¶Æ‡¶∞‡¶ø‡¶§‡ßá, ‡¶Ü‡¶∏‡¶≤ ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá DB ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá)
users = {}
ads_link = "https://example.com"  # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶° ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶ø‡¶®

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    uid = message.from_user.id
    if uid not in users:
        users[uid] = {"coins": 0}
    await message.answer(
        "üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!\n\nüí∞ ‡¶è‡¶° ‡¶¶‡ßá‡¶ñ‡ßá ‡¶ï‡ßü‡ßá‡¶® ‡¶Ü‡ßü ‡¶ï‡¶∞‡ßÅ‡¶®!\n\n"
        "/watch - ‡¶è‡¶° ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®\n"
        "/balance - ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶®‡ßç‡¶∏ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®\n"
        "/withdraw - ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶¶‡¶ø‡¶®"
    )

@dp.message_handler(commands=['watch'])
async def watch_ads(message: types.Message):
    uid = message.from_user.id
    if uid not in users:
        users[uid] = {"coins": 0}
    users[uid]["coins"] += 1  # ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶è‡¶° ‡¶¶‡ßá‡¶ñ‡¶≤‡ßá ‡ßß ‡¶ï‡ßü‡ßá‡¶®
    await message.answer(f"üëâ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶°: {ads_link}\n\n‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡ßß ‡¶ï‡ßü‡ßá‡¶® ‡¶™‡ßá‡¶≤‡ßá‡¶®!")

@dp.message_handler(commands=['balance'])
async def check_balance(message: types.Message):
    uid = message.from_user.id
    coins = users.get(uid, {"coins": 0})["coins"]
    await message.answer(f"üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡¶æ‡¶®‡ßç‡¶∏: {coins} ‡¶ï‡ßü‡ßá‡¶®")

@dp.message_handler(commands=['withdraw'])
async def withdraw(message: types.Message):
    uid = message.from_user.id
    coins = users.get(uid, {"coins": 0})["coins"]
    if coins >= 10:  # ‡¶Æ‡¶ø‡¶®‡¶ø‡¶Æ‡¶æ‡¶Æ ‡ßß‡ß¶ ‡¶ï‡ßü‡ßá‡¶®
        users[uid]["coins"] = 0
        await message.answer("‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
    else:
        await message.answer("‚ùå ‡¶Æ‡¶ø‡¶®‡¶ø‡¶Æ‡¶æ‡¶Æ ‡ßß‡ß¶ ‡¶ï‡ßü‡ßá‡¶® ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§")

# --- ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶è‡¶° ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶Ü‡¶™‡¶°‡ßá‡¶ü) ---
ADMIN_ID = 7097753085  # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Telegram ID ‡¶¨‡¶∏‡¶æ‡¶®

@dp.message_handler(commands=['setad'])
async def set_ad(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        global ads_link
        parts = message.text.split(" ", 1)
        if len(parts) > 1:
            ads_link = parts[1]
            await message.answer(f"‚úÖ ‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶° ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶∏‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá:\n{ads_link}")
        else:
            await message.answer("‚ö†Ô∏è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /setad LINK")
    else:
        await message.answer("‚ùå ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
